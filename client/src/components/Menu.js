// React
import React, { useEffect, useState } from 'react';

// Context API
import { useContext } from 'react';
import { orderContext } from '../providers/OrderProvider';
import { viewContext } from '../providers/ViewProvider';

// Redux
import { useSelector } from 'react-redux';

// Components
import MenuItem from './MenuItem';

// Actions
import { updateStatus } from '../actions/tables.js';
import { Button, Typography } from '@mui/material';
import ShoppingCartIcon from '@mui/icons-material/ShoppingCart';

// MUI
import { Tabs, Tab } from "@mui/material";
import SearchBar from './SearchBar';

// View States
const CART = 'CART';
const ORDERED = 'ORDERED';

const FOOD = "Food";
const DRINK = "Drink";
const DESSERT = "Dessert";

const Menu = () => {
  const [searchQuery, setSearchQuery] = useState('');

  const params = new URLSearchParams(window.location.search);
  const table = params.get('table');

  const { state, setItem, initCookie, getOrderId } = useContext(orderContext);
  const { changeView } = useContext(viewContext);

  useEffect(() => {
    initCookie(parseInt(table));
    updateStatus(table, "OCCUPIED");
  }, []);

  const [menuView, setMenuView] = useState(FOOD);

  const filterTags = (tags, query) => {

    return tags.some((tag) => {
      const tagName = tag.toLowerCase();
      return tagName.includes(query);
    });
  };

  const filterItems = (items, query) => {
    if (!query) {
      return items;
    }

    return items.filter((item) => {
      const itemName = item.name.toLowerCase();
      return itemName.includes(query.toLowerCase()) || filterTags(item.tags, query.toLowerCase());
    });
  };


  // Retrieve all records of the Item model
  // that is in the items store.
  const items = useSelector((state) => state.items);

  // Generate array of MenuItem components.
  //
  // Look at the properties passed to a MenuItem component:
  //
  // key - Needed since each child in a list should have a unique "key" prop.
  //       In our case, we use the _id property generated by MongoDB.
  //
  // item - An Item record with the structure
  //        {
  //          _id: '619b0ae6f5d42f8e3d159cc0',
  //          name: 'Pad Thai Carbonara',
  //          price: 14.99,
  //          description: 'Seductively creamy & nutty.',
  //          category: 'Food'
  //          options: ['Exclude - Peanuts', 'Exclude - Tomato'],
  //          tags: ['noodle', 'signature', 'carbonara', 'pad thai']
  //        }
  //
  // changeView - Function that adds a new view (e.g., "ITEM") into the view state defined in App.js,
  //              which then renders the corresponding component.
  //
  const filteredItems = filterItems(items, searchQuery);
  // setItem - Function that helps the application know which Item record is in focus.
  const generateMenuItems = (category) => {
    return filteredItems.map((item) => {
      console.log(item)
      return item.category === category && <MenuItem key={item._id} item={item} changeView={changeView} setItem={setItem} />
    })
  };

  const changeMenuView = (event, id) => {
    setMenuView(id);
  };

  const checkOrderId = () => {
    getOrderId() ? changeView(ORDERED) : changeView(CART);
  };

  return (
    <div>
      <br />
      <SearchBar
        searchQuery={searchQuery}
        setSearchQuery={setSearchQuery}
      />
      <br />
      <Tabs
        value={menuView}
        onChange={changeMenuView}
        textColor="secondary"
        indicatorColor="secondary"
      >
        <Tab id={FOOD} value={FOOD} label={FOOD} />
        <Tab id={DRINK} value={DRINK} label={DRINK} />
        <Tab id={DESSERT} value={DESSERT} label={DESSERT} />
      </Tabs>
      <div>
        {!items.length ? "Loading..." : generateMenuItems(menuView)}
      </div>
    </div>
  );

};

export default Menu;